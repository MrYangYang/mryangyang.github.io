---
layout: post
title:  "Android内存泄露笔记"
date:   2015-10-20 20:42:43
categories: Android
---

# 内存泄露调试笔记
长生命周期变量存在对短生命周期变量的强引用，就有可能造成内存泄漏。  
内存泄露与static变量有非常大的关系，在jvm中，一个static变量会在整个程序运行的周期内一直存在

## 常见的内存泄漏

#### 匿名内部类
在java中，匿名内部类会持有外部类的一个强引用，这在代码中并没有表现出来，但是却是致命的如果这个匿名内部类被一个静态变量（或者静态变量持有的对象）所引用，那么就很容易造成内存泄漏在Android开发中的常见表现是一个Activity（或者之类的Context）中实例化的匿名内部类事件回调被一个单例所引用，所造成的后果是Activity被leak，Activity以及Activity所强引用的对象，都无法在onDestroy之后被GC回收

对于这类型的leak，常用的解决方法有两种  
1. 把单例和Context上下文中的引用变为弱引用
2. 在上下文的销毁回调函数内，去掉和单例之间的强引用

#### Handler引起的内存泄漏
从某种角度上来说，匿名Handler引起的内存泄漏其实和上面所提到的内存泄漏为同一种，这里单独提出来，是因为Handler引起的内存泄漏更为隐晦。  
参考下面代码

    // somewhere in activity
    HandlerThread thread = new ...
    thread.start();
    Looper looper = thread.getLooper()
    Hander handler = new { ... }(looper); // where leak may happen

这段代码，初略看上去，是没有leak的。然而线程对于jvm来说，是全局的，handlerthread对hander有强引用，而匿名handler持有对Activity的引用，造成的后果是Activity内存泄漏。其实这段代码，影响并不大，只要你记得在onDestroy处调用thread.quit()就好了，原理同上。

#### HashMap引起的内存泄漏
如果一个HashMap是静态的或者持有HashMap引用的变量是静态的，并且这个HashMap的Key是自定义对象，那么这个HashMap有可能会引起内存泄漏。在Java中，HashMap真正用于散列的，是Key的hashCode，这个值，对于String变量，是字符串进行一系列均匀散列的值，对于其他类，如果父类和自身都没有覆写过hashCode，那么这个值是对象在jvm内存中的的地址。考虑下面这种情况

    // somewhere
    static HashMap<SomeKey,SomeValue> map = ...
    SomeKey key = new ...
    SomeValue value = new ...
    map.put(key, value);

    // somewhere else
    SomeKey key = new ...
    SomeValue = map.get(key)

因为对象是new生成的，在jvm中的地址不一致，导致get到的变量为null，然而put却是有效的，后果是这个HashMap会不断变大，泄漏的内存最终把jvm吃光T_T

因为在Android中，经常用HashMap等数据结构做变量缓存，因此，在使用非String对象类型作为key的时候，必须格外小心。在使用HashMap做缓存的时候，如果出现这类型的leak，表现出来的是缓存一直未命中，但是程序却能正常运行，直到很久之后，出现OOME。

解决方案是如果使用非String对象作为key，覆写作为Key的类的hashCode和equal方法,覆写的原则
可Google

## 写在最后
分享一个追查mem leak的神器
[Leakcanary](https://github.com/square/leakcanary)
